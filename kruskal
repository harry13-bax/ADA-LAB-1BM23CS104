#include <stdio.h>
#define MAX 100

struct Edge {
    int u, v, weight;
};

int find(int parent[], int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

void unionSet(int parent[], int x, int y) {
    parent[find(parent, x)] = find(parent, y);
}

void sortEdges(struct Edge edges[], int E) {
    for (int i = 0; i < E - 1; i++)
        for (int j = 0; j < E - i - 1; j++)
            if (edges[j].weight > edges[j + 1].weight) {
                struct Edge temp = edges[j];
                edges[j] = edges[j + 1];
                edges[j + 1] = temp;
            }
}

int main() {
    int V, adj[MAX][MAX], edgeCount = 0;
    struct Edge edges[MAX * MAX];

    printf("Enter number of vertices: ");
    scanf("%d", &V);

    printf("Enter the adjacency matrix (0 = no edge):\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++) {
            scanf("%d", &adj[i][j]);
            if (j > i && adj[i][j]) {
                edges[edgeCount++] = (struct Edge){i, j, adj[i][j]};
            }
        }

    sortEdges(edges, edgeCount);

    int parent[V], totalWeight = 0;
    for (int i = 0; i < V; i++) parent[i] = i;

    printf("\nEdges in the Minimum Spanning Tree:\n");
    for (int i = 0, count = 0; i < edgeCount && count < V - 1; i++) {
        int u = edges[i].u, v = edges[i].v, w = edges[i].weight;
        if (find(parent, u) != find(parent, v)) {
            printf("%d -- %d == %d\n", u, v, w);
            totalWeight += w;
            unionSet(parent, u, v);
            count++;
        }
    }

    printf("Total weight of MST: %d\n", totalWeight);
    return 0;
}
